#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

/ {
    behaviors {
      #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO
      macro_ver: macro_ver {
        compatible = "zmk,behavior-macro";
        label = "macro_version";
        #binding-cells = <0>;
        bindings = <&kp RET>;
      };
      #endif

      hm: homerow_mods {
          compatible = "zmk,behavior-hold-tap";
          label = "HOMEROW_MODS";
          #binding-cells = <2>;
          tapping-term-ms = <200>;
          quick_tap_ms = <175>;
          flavor = "tap-preferred";
          bindings = <&kp>, <&kp>;
      };
    };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
    // --------------------------------------------------------------------------------------
    // |      |     |     |     |     |     |     |   |BLTOG|      |     |     |     |      |
    // |  TAB |  j  |  d  |  u  |  a  |  x  |     |   |  p  |  h   |  l  |  m  |  w  |  ß   |
    // |      |  c  |  t  |  i  |  e  |  o  |     |   |  b  |  n   |  r  |  s  |  g  |  q   |
    // | LCTEL|  f  |  v  |  ü  |  ä  |  ö  |     |   |  y  |  y   |  ,  |  .  |  k  | RCTRL|
    // |      |     |     |     |     |
    //
    //                                |     |     |   |     |     |
    //                                      |     |   |     |
    //                          | M 1 | M 2 | LALT|   |     | M 4 |SPACE|
        &none     &none  &none  &none    &none   &none    &tog 1                                                               &bl BL_TOG &none &none &none     &none   &none  &none
        &kp TAB   &kp J  &kp D  &kp U    &kp A   &kp X    &none                                                                &none      &kp P &kp H &kp L     &kp M   &kp W  &kp MINUS
        &kp LALT  &kp C  &kp T  &kp I    &kp E   &kp O    &none          &none &none     /**/ &none &none                      &none      &kp B &kp N &kp R     &kp S   &kp G  &kp Q
        &kp LCTRL &kp F  &kp V  &kp LBKT &kp SQT &kp SEMI                      &none     /**/ &none                                       &kp Z &kp Y &kp COMMA &kp DOT &kp K  &kp RCTRL
        &none     &none  &none  &none    &none                     &mo 1 &mo 2 &kp LALT  /**/ &none &mo 3 &kp SPACE                       &none &none     &none   &none  &none
      >;
    };
    shift {
      bindings = <
    // --------------------------------------------------------------------------------------
    // |      |     |     |     |     |     |     |   |     |      |     |     |     |      |
    // |  TAB |  J  |  D  |  U  |  A  |  X  |     |   |  P  |  H   |  L  |  M  |  W  |  €   |
    // |S/LALT|  C  |  T  |  I  |  E  |  O  |     |   |  B  |  N   |  R  |  S  |  G  |  Q   |
    // |S/LCTL|  F  |  V  |  Ü  |  Ä  |  Ö  |     |   |  Z  |  Y   |  ,  |  .  |  K  |S/RCTL|
    // |      |     |     |     |     |
    //
    //                                |     |     |   |     |     |
    //                                      |     |   |     |
    //                          |     |    |S/LALT|   |     |     |LS(SPC)|
        &none         &none      &none      &none        &none       &none        &none                                                                &none  &none      &none      &none         &none       &none      &none 
        &kp LS(TAB)   &kp LS(J)  &kp LS(D)  &kp LS(U)    &kp LS(A)   &kp LS(X)    &none                                                                &none  &kp LS(P)  &kp LS(H)  &kp LS(L)     &kp LS(M)   &kp LS(W)  &kp RA(E)
        &kp LS(LALT)  &kp LS(C)  &kp LS(T)  &kp LS(I)    &kp LS(E)   &kp LS(O)    &none          &none  &none         /**/ &none  &none                &none  &kp LS(B)  &kp LS(N)  &kp LS(R)     &kp LS(S)   &kp LS(G)  &kp LS(Q)
        &kp LS(LCTRL) &kp LS(F)  &kp LS(V)  &kp LS(LBKT) &kp LS(SQT) &kp LS(SEMI)                       &none         /**/ &none                              &kp LS(Z)  &kp LS(Y)  &kp LS(COMMA) &kp LS(DOT) &kp LS(K)  &kp LS(RCTRL)
        &none         &none      &none      &none        &none                         &kp LSHFT &trans &kp LS(LALT)  /**/ &none &trans &kp LS(SPACE)                    &none      &none         &none       &none      &none
      >;
    };
    programming {
      bindings = <
    // --------------------------------------------------------------------------------------
    // |      |     |     |     |     |     |     |   |     |      |     |     |     |      |
    // |      |  @  |  _  |  [  |  ]  |  ^  |   |  !  |  <  |  >  |  =  |  &  |      |
    // |      |  \  |  /  |  {  |  }  |  *  |   |  ?  |  (  |  )  |  -  |  :  |      |
    // |      |  #  |  $  |  |  |  ~  |  `  |   |  +  |  %  |  "  |  '  |  ;  |      |
    // |      |     |     |     |     |
    //
    //                                |     |     |   |     |     |
    //                                      |     |   |     |
    //                          |     |    |S/LALT|   |     |     |LS(SPC)|
        &none     &none          &none             &none            &none              &none         &none                                                                &none  &none             &none            &none            &none            &none            &none 
        &none     &kp RA(Q)      &kp LS(SLASH)     &kp RA(NUMBER_8) &kp RA(NUMBER_9)   &kp GRAVE     &none                                                                &none  &kp LS(NUMBER_1)  &kp NUBS         &kp LS(NUBS)     &kp LS(NUMBER_0) &kp LS(NUMBER_6) &none
        &none     &kp RA(MINUS)  &kp LS(NUMBER_7)  &kp RA(NUMBER_7) &kp RA(NUMBER_0)   &kp LS(RBKT)  &none          &none  &none    /**/ &none  &none                     &none  &kp LS(MINUS)     &kp LS(NUMBER_8) &kp LS(NUMBER_9) &kp FSLH         &kp LS(DOT)      &none
        &kp LCTRL &kp NUHS       &kp LS(NUMBER_4)  &kp RA(NUBS)     &kp RA(RBKT)       &kp LS(EQUAL)                       &none    /**/ &none                                   &kp RBKT          &kp LS(NUMBER_5) &kp LS(NUMBER_2) &kp LS(NUHS)     &kp LS(COMMA)    &kp RCTRL
        &none     &none          &none             &none            &none                                    &kp LSHFT &trans &kp LALT /**/ &none &trans &kp SPACE                                    &none            &none            &none            &none            &none
      >;
    };

    numbers {
      bindings = <
    // --------------------------------------------------------------------------------------
    // |      |     |     |     |     |     |     |   |     |      |     |     |     |      |
    // |      | PgUp | BSP |  Up  | DEL  | PgDwn |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
    // |      | HOME | LEFT| DOWN | RGHT | ESC   |   |  -  |  =  |  [  |  ]  |  \  |  `   |
    // |      | END  |     |      | ENT  | TAB   |   |  _  |  +  |  {  |  }  | "|" |  ~   |
    // |      |     |     |     |     |
    //
    //                                |     |     |   |     |     |
    //                                      |     |   |     |
    //                          |     |    |S/LALT|   |     |     |LS(SPC)|
        &none     &none     &none    &none     &none      &none     &none                                                                &mo 4  &none        &none        &none        &none        &none  &none 
        &none     &kp PG_UP &kp BSPC &kp UP    &kp DEL    &kp PG_DN &none                                                                &none  &none        &kp NUMBER_7 &kp NUMBER_8 &kp NUMBER_9 &none  &none
        &none     &kp HOME  &kp LEFT &kp DOWN  &kp RIGHT  &kp ESC   &none          &none  &none      /**/ &none  &none                   &none  &none        &kp NUMBER_4 &kp NUMBER_5 &kp NUMBER_6 &none  &none
        &kp LCTRL &kp END   &none    &none     &kp ENTER  &kp TAB                         &none      /**/ &none                                 &kp NUMBER_0 &kp NUMBER_1 &kp NUMBER_2 &kp NUMBER_3 &none  &kp RCTRL
        &none     &none     &none    &none     &none                     &kp LSHFT &trans &kp LALT   /**/ &none &trans &trans                                &none        &none        &none        &none  &none
      >;
    };
    mod {
      bindings = <
        &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none                                                                     &trans                 &none        &none        &none        &none &none &none
        &none &none        &none        &none        &none        &none        &bootloader                                                               &bootloader            &none        &none        &none        &none &none &none
        &none &none        &none        &none        &none        &none        &bl BL_TOG              &none &none &bt BT_CLR &none                      &rgb_ug RGB_MEFS_CMD 5 &none        &none        &none        &none &none &none
        &none &none        &none        &none        &macro_ver   &none                                      &none &none                                                        &none        &none        &none        &none &none &none
        &none &none        &none        &none        &none                                       &none &none &none &none      &bl BL_TOG &rgb_ug RGB_TOG                                     &bl BL_INC   &bl BL_DEC   &none &none &none
      >;
    };
  };
};
